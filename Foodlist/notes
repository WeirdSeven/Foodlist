python manage.py makemigrations menu
This command looks at the changes of the model class of menu, and generates
a human-editable python file in menu/migrations. This file represents what
changes are to be made to the database schema.
The app name menu can be omitted. In that case, it looks at all apps.

You can translgate the migration file into SQL by
python manage.py sqlmigrate menu migration_name(like 0001)
This is the actual SQL query that is going to be executed when you apply
the migerations.

In order to apply the migrations, run command
python manage.py migrate menu
The app name menu can be omitted. In that case, it applies migrations of
all apps.

# User 
```
python manage.py shell # Go to python shell
from django.contrib.auth.models import User # Import the user class

User.objects.all() # List all users
User.objects.filter(is_superuser=True) # Retrive all superusers
User.objects.get(username='...') # Retrieve user by name

user.is_superuser = True # Set superuser privilege to a user
usr.set_password('raw password') # Set password of a user
usr.save() # Save changes
``` 

Alternatively, use this command to change password
```python manage.py changepassword mickey```

Nginx will face the outside world. It will serve media files (images, CSS, etc) directly 
from the file system. However, it can't talk directly to Django applications; it needs 
something that will run the application, feed it requests from the web, and return responses.

# Deployment
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04

"""
Django settings for Foodlist project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
with open('/etc/django_secret_key') as f:
    SECRET_KEY = f.read().strip()
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.path.exists('/etc/django_dev')

ALLOWED_HOSTS = [
    '127.0.0.1',
    'delaiqi.biz',
]

# Application definition

INSTALLED_APPS = [
    # django apps first
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # plug-ins
    'nested_admin',
    'multiforloop',
    'guardian',

    # custom apps below
    'accounts',
    'common',
    # 'menu',
    'purchasing',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Foodlist.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Foodlist.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'postgres',
        'USER': 'haobai',
        'PASSWORD': 'hb123456',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Authentication

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # this is default
    'guardian.backends.ObjectPermissionBackend',
]

AUTH_USER_MODEL = 'accounts.CustomUser'

PHONENUMBER_DEFAULT_REGION = 'CN'


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = False

USE_TZ = True

# DATE_FORMAT = 'Y m d'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

PROJECT_ROOT = os.path.normpath(os.path.dirname(__file__))

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static_dev'),
]

# This is a new requirement from Django 3.2
# See https://docs.djangoproject.com/en/3.2/releases/3.2/#customizing-type-of-auto-created-primary-keys
# DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


# App and model ordering
# TODO: Refactor this function as a method of a subclass of SiteAdmin
# See: https://stackoverflow.com/questions/4877335/how-to-use-custom-adminsite-class

def get_app_list(self, request):
    from django.apps import apps
    from django.contrib.admin.sites import site

    app_dict = self._build_app_dict(request)

    # Sort the apps by admin_priority of apps.
    app_priority = {
        app['app_label']: getattr(
            apps.get_app_config(app['app_label']),
            'admin_priority',
            10  # The 'auth' app will use this default
        )
        for app in app_dict.values()
    }
    app_list = sorted(app_dict.values(), key=lambda x: app_priority[x['app_label']])

    # Sort the models by admin_priority within each app.
    for app in app_list:
        model_priority = {
            model['object_name']: getattr(
                site._registry[apps.get_model(app['app_label'], model['object_name'])],
                'admin_priority',
                10
            )
            for model in app['models']
        }
        app['models'].sort(key=lambda x: model_priority[x['object_name']])

    return app_list


from django.contrib import admin
admin.AdminSite.get_app_list = get_app_list
